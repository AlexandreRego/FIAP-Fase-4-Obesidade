import streamlit as st
import joblib
import numpy as np
import pandas as pd
import plotly.express as px
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.ensemble import RandomForestClassifier

# =================================================================================
# CONFIGURA√á√ÉO DA P√ÅGINA
# =================================================================================
st.set_page_config(
    page_title="An√°lise de Obesidade | Dashboard Preditivo",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =================================================================================
# FUN√á√ïES DE CACHE E PROCESSAMENTO
# =================================================================================

@st.cache_resource
def carregar_e_treinar_modelo():
    """
    Carrega os dados, define o pipeline de pr√©-processamento e treina o modelo
    RandomForest. O resultado √© cacheado para evitar re-treinamento a cada
    execu√ß√£o do script.
    """
    try:
        df_treino = pd.read_csv("Obesity.csv")
    except FileNotFoundError:
        st.error("Arquivo 'Obesity.csv' n√£o encontrado. Por favor, certifique-se de que o arquivo est√° no diret√≥rio correto.")
        st.stop()
        
    X = df_treino.drop(columns=["Obesity"])
    y = df_treino["Obesity"]

    # Identifica√ß√£o autom√°tica das colunas num√©ricas e categ√≥ricas
    numeric_features = X.select_dtypes(include=np.number).columns.tolist()
    categorical_features = X.select_dtypes(exclude=np.number).columns.tolist()

    # Defini√ß√£o dos transformadores para o pipeline
    numeric_transformer = StandardScaler()
    categorical_transformer = OneHotEncoder(drop='first', handle_unknown='ignore')

    # Cria√ß√£o do pr√©-processador
    preprocessor = ColumnTransformer(
        transformers=[
            ("num", numeric_transformer, numeric_features),
            ("cat", categorical_transformer, categorical_features)
        ]
    )

    # Cria√ß√£o do pipeline final
    pipeline_obesidade = Pipeline(steps=[
        ("preprocessor", preprocessor),
        ("classifier", RandomForestClassifier(n_estimators=100, random_state=42))
    ])

    pipeline_obesidade.fit(X, y)
    return pipeline_obesidade

@st.cache_data
def carregar_dados_brutos():
    """Carrega o arquivo CSV bruto para an√°lise e o armazena em cache."""
    try:
        dados = pd.read_csv("Obesity.csv")
        return dados
    except FileNotFoundError:
        return None

# --- Carregamento de Dados e Modelo ---
modelo_pipeline = carregar_e_treinar_modelo()
df = carregar_dados_brutos()

# =================================================================================
# INTERFACE PRINCIPAL DO STREAMLIT
# =================================================================================

# --- T√≠tulo e Descri√ß√£o ---
st.title("An√°lise de Obesidade | Dados para Insight's")
st.markdown("""
Esta aplica√ß√£o utiliza Machine Learning para prever o n√≠vel de obesidade com base em caracter√≠sticas f√≠sicas e h√°bitos de vida.
**Use a barra lateral para inserir seus dados e obter uma previs√£o personalizada.** Explore o painel anal√≠tico abaixo para descobrir insights sobre os fatores que influenciam a obesidade.
""")

# --- Barra Lateral (Sidebar) para Entradas do Usu√°rio ---
st.sidebar.header("‚öôÔ∏è Insira seus Dados para Previs√£o")

with st.sidebar.form("formulario_previsao"):
    st.subheader("Informa√ß√µes Pessoais")
    gender = st.selectbox("G√™nero", df['Gender'].unique(), index=0)
    age = st.slider("Idade", 14, 70, 25)
    height = st.slider("Altura (m)", 1.40, 2.10, 1.75)
    weight = st.slider("Peso (kg)", 40.0, 180.0, 80.0)

    st.subheader("H√°bitos e Hist√≥rico Familiar")
    family_history = st.selectbox("Possui hist√≥rico familiar de sobrepeso?", ["yes", "no"], format_func=lambda x: "Sim" if x == 'yes' else "N√£o")
    favc = st.selectbox("Consome alimentos de alta caloria com frequ√™ncia (FAVC)?", ["yes", "no"], format_func=lambda x: "Sim" if x == 'yes' else "N√£o")
    fcvc = st.slider("Frequ√™ncia de consumo de vegetais (FCVC)", 1.0, 3.0, 2.0, help="1: Nunca, 2: √Äs vezes, 3: Sempre")
    ncp = st.slider("N√∫mero de refei√ß√µes principais por dia", 1.0, 4.0, 3.0)
    caec = st.selectbox("Consome alimentos entre as refei√ß√µes (CAEC)?", df['CAEC'].unique())
    smoke = st.selectbox("√â fumante?", ["no", "yes"], format_func=lambda x: "Sim" if x == 'yes' else "N√£o")
    ch2o = st.slider("Consumo de √°gua di√°rio (Litros)", 1.0, 3.0, 2.0)
    scc = st.selectbox("Monitora o consumo de calorias?", ["no", "yes"], format_func=lambda x: "Sim" if x == 'yes' else "N√£o")
    faf = st.slider("Frequ√™ncia de atividade f√≠sica (dias/semana)", 0.0, 7.0, 3.0)
    tue = st.slider("Tempo de uso de telas (horas/dia)", 0.0, 5.0, 1.0)
    calc = st.selectbox("Frequ√™ncia de consumo de √°lcool (CALC)", df['CALC'].unique())
    mtrans = st.selectbox("Principal meio de transporte", df['MTRANS'].unique())

    botao_submeter = st.form_submit_button("Analisar e Prever")

# --- Exibi√ß√£o do Resultado da Previs√£o ---
if botao_submeter:
    input_dict = {
        "Gender": gender, "Age": age, "Height": height, "Weight": weight,
        "family_history": family_history, "FAVC": favc, "FCVC": fcvc, "NCP": ncp,
        "CAEC": caec, "SMOKE": smoke, "CH2O": ch2o, "SCC": scc, "FAF": faf,
        "TUE": tue, "CALC": calc, "MTRANS": mtrans
    }
    input_df = pd.DataFrame([input_dict])
    
    predicao = modelo_pipeline.predict(input_df)[0]
    probabilidade_predicao = modelo_pipeline.predict_proba(input_df)
    imc = weight / (height ** 2)

    st.header("üéØ Resultado da An√°lise Preditiva")
    col_metrica1, col_metrica2 = st.columns(2)
    with col_metrica1:
        st.metric(label="N√≠vel de Obesidade Previsto", value=predicao)
    with col_metrica2:
        st.metric(label="Seu IMC (√çndice de Massa Corporal)", value=f"{imc:.2f}")

    st.info(f"Com base nos dados fornecidos, o modelo indica uma forte tend√™ncia para **{predicao}**.")
    
    st.subheader("Confian√ßa da Previs√£o")
    df_prob = pd.DataFrame(probabilidade_predicao, columns=modelo_pipeline.classes_, index=["Probabilidade"]).T
    df_prob = df_prob.sort_values(by="Probabilidade", ascending=False)
    
    fig_prob = px.bar(
        df_prob, x=df_prob.index, y='Probabilidade',
        labels={'Probabilidade': 'Probabilidade', 'index': 'N√≠vel de Obesidade'},
        text_auto='.2%', title="Probabilidade para Cada Categoria"
    )
    fig_prob.update_layout(yaxis_title="Probabilidade", xaxis_title="N√≠vel de Obesidade")
    st.plotly_chart(fig_prob, use_container_width=True)

# --- Se√ß√£o de Insights Anal√≠ticos ---
if df is not None:
    st.markdown("<hr>", unsafe_allow_html=True)
    st.header("üìä Painel Anal√≠tico Interativo")
    st.markdown("Explore as rela√ß√µes entre diferentes fatores e os n√≠veis de obesidade no conjunto de dados.")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Distribui√ß√£o Geral da Obesidade")
        contagem_obesidade = df['Obesity'].value_counts()
        fig_pizza = px.pie(names=contagem_obesidade.index, values=contagem_obesidade.values,
                            title="Propor√ß√£o de cada N√≠vel de Obesidade", hole=0.3)
        fig_pizza.update_layout(legend_title_text='N√≠veis de Obesidade')
        st.plotly_chart(fig_pizza, use_container_width=True)

    with col2:
        st.subheader("Fatores Mais Relevantes na Previs√£o")
        importances = modelo_pipeline.named_steps['classifier'].feature_importances_
        # Acessando os nomes das features ap√≥s o pr√©-processamento
        preprocessor = modelo_pipeline.named_steps['preprocessor']
        numeric_features = preprocessor.transformers_[0][2]
        cat_features_out = preprocessor.named_transformers_['cat'].get_feature_names_out(preprocessor.transformers_[1][2])
        all_features = numeric_features + list(cat_features_out)
        
        df_importancia = pd.DataFrame({'Fator': all_features, 'Import√¢ncia': importances})
        df_importancia = df_importancia.sort_values(by='Import√¢ncia', ascending=False).head(15)

        fig_importancia = px.bar(
            df_importancia, x='Import√¢ncia', y='Fator', orientation='h',
            title='Import√¢ncia de Cada Fator para o Modelo',
            labels={'Import√¢ncia': 'Import√¢ncia Relativa', 'Fator': 'Fator'},
            text='Import√¢ncia'
        )
        fig_importancia.update_traces(texttemplate='%{text:.2f}', textposition='outside')
        fig_importancia.update_layout(yaxis={'categoryorder':'total ascending'})
        st.plotly_chart(fig_importancia, use_container_width=True)

    st.markdown("<hr>", unsafe_allow_html=True)
    col3, col4 = st.columns(2)

    with col3:
        st.subheader("Distribui√ß√£o de Idade por N√≠vel de Obesidade")
        fig_boxplot_idade = px.box(df, x="Obesity", y="Age", color="Obesity",
                                    title="Faixa Et√°ria por Categoria de Obesidade",
                                    labels={"Obesity": "N√≠vel de Obesidade", "Age": "Idade"})
        st.plotly_chart(fig_boxplot_idade, use_container_width=True)

    with col4:
        st.subheader("Distribui√ß√£o de Obesidade por G√™nero")
        obesidade_genero = df.groupby(['Gender', 'Obesity']).size().reset_index(name='Contagem')
        fig_barras_genero = px.bar(
            obesidade_genero, x="Obesity", y="Contagem", color="Gender", barmode="group",
            title="Contagem de N√≠veis de Obesidade por G√™nero",
            labels={"Obesity": "N√≠vel de Obesidade", "Contagem": "N√∫mero de Pessoas", "Gender": "G√™nero"}
        )
        st.plotly_chart(fig_barras_genero, use_container_width=True)

    st.markdown("<hr>", unsafe_allow_html=True)
    st.subheader("Rela√ß√£o entre Peso, Altura e N√≠vel de Obesidade")
    fig_dispersao = px.scatter(
        df, x="Height", y="Weight", color="Obesity",
        hover_data=['Age', 'Gender'], title="Dispers√£o de Peso vs. Altura",
        labels={"Height": "Altura (m)", "Weight": "Peso (kg)", "Obesity": "N√≠vel de Obesidade"}
    )
    st.plotly_chart(fig_dispersao, use_container_width=True)

    st.markdown("<hr>", unsafe_allow_html=True)
    st.subheader("Matriz de Correla√ß√£o entre Vari√°veis Num√©ricas")
    st.markdown("Esta matriz mostra como as vari√°veis num√©ricas se relacionam. Valores pr√≥ximos de 1 (vermelho) ou -1 (azul) indicam forte correla√ß√£o.")
    df_numerico = df.select_dtypes(include=[np.number])
    correlacao = df_numerico.corr()

    fig_heatmap = px.imshow(
        correlacao, text_auto=True, aspect="auto",
        color_continuous_scale='RdBu_r', title="Mapa de Calor das Correla√ß√µes"
    )
    st.plotly_chart(fig_heatmap, use_container_width=True)